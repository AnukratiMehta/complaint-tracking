// <auto-generated />
using ComplaintTracking.Data;
using ComplaintTracking.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace ComplaintTracking.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180102205520_IncreaseComplaintActionComment")]
    partial class IncreaseComplaintActionComment
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ComplaintTracking.Models.ActionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("LookupActionTypes");
                });

            modelBuilder.Entity("ComplaintTracking.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Active");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<Guid?>("OfficeId");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("Phone")
                        .HasMaxLength(25);

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OfficeId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ComplaintTracking.Models.Complaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CallerCity")
                        .HasMaxLength(50);

                    b.Property<string>("CallerEmail")
                        .HasMaxLength(150);

                    b.Property<string>("CallerName")
                        .HasMaxLength(100);

                    b.Property<string>("CallerPhoneNumber")
                        .HasMaxLength(25);

                    b.Property<int?>("CallerPhoneType");

                    b.Property<string>("CallerPostalCode")
                        .HasMaxLength(10);

                    b.Property<string>("CallerRepresents")
                        .HasMaxLength(25);

                    b.Property<string>("CallerSecondaryPhoneNumber")
                        .HasMaxLength(25);

                    b.Property<int?>("CallerSecondaryPhoneType");

                    b.Property<int?>("CallerStateId");

                    b.Property<string>("CallerStreet")
                        .HasMaxLength(100);

                    b.Property<string>("CallerStreet2")
                        .HasMaxLength(100);

                    b.Property<string>("CallerTertiaryPhoneNumber")
                        .HasMaxLength(25);

                    b.Property<int?>("CallerTertiaryPhoneType");

                    b.Property<string>("ComplaintCity")
                        .HasMaxLength(50);

                    b.Property<bool>("ComplaintClosed");

                    b.Property<int?>("ComplaintCountyId");

                    b.Property<string>("ComplaintDirections")
                        .HasMaxLength(4000);

                    b.Property<string>("ComplaintLocation")
                        .HasMaxLength(4000);

                    b.Property<string>("ComplaintNature");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<Guid?>("CurrentAssignmentTransitionId");

                    b.Property<Guid>("CurrentOfficeId");

                    b.Property<string>("CurrentOwnerId");

                    b.Property<string>("CurrentProgram")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DateComplaintClosed");

                    b.Property<DateTime?>("DateCurrentOwnerAccepted");

                    b.Property<DateTime?>("DateCurrentOwnerAssigned");

                    b.Property<DateTime?>("DateDeleted");

                    b.Property<DateTime>("DateEntered");

                    b.Property<DateTime>("DateReceived");

                    b.Property<string>("DeleteComments")
                        .HasMaxLength(4000);

                    b.Property<bool>("Deleted");

                    b.Property<string>("DeletedById");

                    b.Property<string>("EnteredById");

                    b.Property<Guid?>("PrimaryConcernId");

                    b.Property<string>("ReceivedById");

                    b.Property<string>("ReviewById");

                    b.Property<string>("ReviewComments")
                        .HasMaxLength(4000);

                    b.Property<Guid?>("SecondaryConcernId");

                    b.Property<string>("SourceCity")
                        .HasMaxLength(50);

                    b.Property<string>("SourceContactName")
                        .HasMaxLength(100);

                    b.Property<string>("SourceEmail")
                        .HasMaxLength(150);

                    b.Property<string>("SourceFacilityId")
                        .HasMaxLength(50);

                    b.Property<string>("SourceFacilityName")
                        .HasMaxLength(100);

                    b.Property<string>("SourcePhoneNumber")
                        .HasMaxLength(25);

                    b.Property<int?>("SourcePhoneType");

                    b.Property<string>("SourcePostalCode")
                        .HasMaxLength(10);

                    b.Property<string>("SourceSecondaryPhoneNumber")
                        .HasMaxLength(25);

                    b.Property<int?>("SourceSecondaryPhoneType");

                    b.Property<int?>("SourceStateId");

                    b.Property<string>("SourceStreet")
                        .HasMaxLength(100);

                    b.Property<string>("SourceStreet2")
                        .HasMaxLength(100);

                    b.Property<string>("SourceTertiaryPhoneNumber")
                        .HasMaxLength(25);

                    b.Property<int?>("SourceTertiaryPhoneType");

                    b.Property<int>("Status");

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CallerStateId");

                    b.HasIndex("ComplaintCountyId");

                    b.HasIndex("CurrentOfficeId");

                    b.HasIndex("CurrentOwnerId");

                    b.HasIndex("DeletedById");

                    b.HasIndex("EnteredById");

                    b.HasIndex("PrimaryConcernId");

                    b.HasIndex("ReceivedById");

                    b.HasIndex("ReviewById");

                    b.HasIndex("SecondaryConcernId");

                    b.HasIndex("SourceStateId");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("ComplaintTracking.Models.ComplaintAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActionDate");

                    b.Property<Guid>("ActionTypeId");

                    b.Property<string>("Comments");

                    b.Property<int>("ComplaintId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime?>("DateDeleted");

                    b.Property<DateTime?>("DateEntered");

                    b.Property<bool>("Deleted");

                    b.Property<string>("DeletedById");

                    b.Property<string>("EnteredById");

                    b.Property<string>("Investigator")
                        .HasMaxLength(100);

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("ComplaintId");

                    b.HasIndex("DeletedById");

                    b.HasIndex("EnteredById");

                    b.ToTable("ComplaintActions");
                });

            modelBuilder.Entity("ComplaintTracking.Models.ComplaintTransition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment")
                        .HasMaxLength(4000);

                    b.Property<int>("ComplaintId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime?>("DateAccepted");

                    b.Property<DateTime>("DateTransferred");

                    b.Property<string>("TransferredByUserId");

                    b.Property<Guid?>("TransferredFromOfficeId");

                    b.Property<string>("TransferredFromUserId");

                    b.Property<Guid?>("TransferredToOfficeId");

                    b.Property<string>("TransferredToUserId");

                    b.Property<int>("TransitionType");

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ComplaintId");

                    b.HasIndex("TransferredByUserId");

                    b.HasIndex("TransferredFromOfficeId");

                    b.HasIndex("TransferredFromUserId");

                    b.HasIndex("TransferredToOfficeId");

                    b.HasIndex("TransferredToUserId");

                    b.ToTable("ComplaintTransitions");
                });

            modelBuilder.Entity("ComplaintTracking.Models.Concern", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("LookupConcerns");
                });

            modelBuilder.Entity("ComplaintTracking.Models.County", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("LookupCounties");
                });

            modelBuilder.Entity("ComplaintTracking.Models.EmailLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateSent");

                    b.Property<string>("From");

                    b.Property<string>("HtmlBody");

                    b.Property<string>("Subject");

                    b.Property<string>("TextBody");

                    b.Property<string>("To");

                    b.HasKey("Id");

                    b.ToTable("EmailLogs");
                });

            modelBuilder.Entity("ComplaintTracking.Models.Office", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("MasterUserId");

                    b.Property<string>("Name");

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("MasterUserId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("LookupOffices");
                });

            modelBuilder.Entity("ComplaintTracking.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(30);

                    b.Property<string>("PostalAbbreviation")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("LookupStates");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ComplaintTracking.Models.ApplicationUser", b =>
                {
                    b.HasOne("ComplaintTracking.Models.Office", "Office")
                        .WithMany("Users")
                        .HasForeignKey("OfficeId");
                });

            modelBuilder.Entity("ComplaintTracking.Models.Complaint", b =>
                {
                    b.HasOne("ComplaintTracking.Models.State", "CallerState")
                        .WithMany()
                        .HasForeignKey("CallerStateId");

                    b.HasOne("ComplaintTracking.Models.County", "ComplaintCounty")
                        .WithMany()
                        .HasForeignKey("ComplaintCountyId");

                    b.HasOne("ComplaintTracking.Models.Office", "CurrentOffice")
                        .WithMany()
                        .HasForeignKey("CurrentOfficeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComplaintTracking.Models.ApplicationUser", "CurrentOwner")
                        .WithMany()
                        .HasForeignKey("CurrentOwnerId");

                    b.HasOne("ComplaintTracking.Models.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("ComplaintTracking.Models.ApplicationUser", "EnteredBy")
                        .WithMany()
                        .HasForeignKey("EnteredById");

                    b.HasOne("ComplaintTracking.Models.Concern", "PrimaryConcern")
                        .WithMany()
                        .HasForeignKey("PrimaryConcernId");

                    b.HasOne("ComplaintTracking.Models.ApplicationUser", "ReceivedBy")
                        .WithMany()
                        .HasForeignKey("ReceivedById");

                    b.HasOne("ComplaintTracking.Models.ApplicationUser", "ReviewBy")
                        .WithMany()
                        .HasForeignKey("ReviewById");

                    b.HasOne("ComplaintTracking.Models.Concern", "SecondaryConcern")
                        .WithMany()
                        .HasForeignKey("SecondaryConcernId");

                    b.HasOne("ComplaintTracking.Models.State", "SourceState")
                        .WithMany()
                        .HasForeignKey("SourceStateId");
                });

            modelBuilder.Entity("ComplaintTracking.Models.ComplaintAction", b =>
                {
                    b.HasOne("ComplaintTracking.Models.ActionType", "ActionType")
                        .WithMany()
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComplaintTracking.Models.Complaint", "Complaint")
                        .WithMany("ComplaintActions")
                        .HasForeignKey("ComplaintId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComplaintTracking.Models.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("ComplaintTracking.Models.ApplicationUser", "EnteredBy")
                        .WithMany()
                        .HasForeignKey("EnteredById");
                });

            modelBuilder.Entity("ComplaintTracking.Models.ComplaintTransition", b =>
                {
                    b.HasOne("ComplaintTracking.Models.Complaint", "Complaint")
                        .WithMany("ComplaintTransitions")
                        .HasForeignKey("ComplaintId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComplaintTracking.Models.ApplicationUser", "TransferredByUser")
                        .WithMany()
                        .HasForeignKey("TransferredByUserId");

                    b.HasOne("ComplaintTracking.Models.Office", "TransferredFromOffice")
                        .WithMany()
                        .HasForeignKey("TransferredFromOfficeId");

                    b.HasOne("ComplaintTracking.Models.ApplicationUser", "TransferredFromUser")
                        .WithMany()
                        .HasForeignKey("TransferredFromUserId");

                    b.HasOne("ComplaintTracking.Models.Office", "TransferredToOffice")
                        .WithMany()
                        .HasForeignKey("TransferredToOfficeId");

                    b.HasOne("ComplaintTracking.Models.ApplicationUser", "TransferredToUser")
                        .WithMany()
                        .HasForeignKey("TransferredToUserId");
                });

            modelBuilder.Entity("ComplaintTracking.Models.Office", b =>
                {
                    b.HasOne("ComplaintTracking.Models.ApplicationUser", "MasterUser")
                        .WithMany()
                        .HasForeignKey("MasterUserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ComplaintTracking.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ComplaintTracking.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComplaintTracking.Models.ApplicationUser")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ComplaintTracking.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
