@model ComplaintDetailsViewModel

@{
    ViewData["Title"] = $"Complaint ID {Model.Id}";
}

<h1 id="details">@ViewData["Title"]</h1>

@if (Model.UserIsOwner)
{
    <p>This Complaint was assigned to you on @Html.DisplayFor(model => model.DateCurrentOwnerAssigned)</p>
}

@if (!Model.Deleted)
{
    @if (Model.MustAccept && !Model.ComplaintClosed)
    {
        <form asp-action="Accept">
            @Html.HiddenFor(model => model.Id)
            <button type="submit">Accept</button>
        </form>
    }
    <div class="gaepd-noprint">
        @if (Model.UserCanEditDetails && !Model.ComplaintClosed && !Model.MustAccept)
        {
            <a asp-action="Edit" asp-route-id="@Model.Id" class="usa-button usa-button-outline">Edit details</a>
        }
        @if (Model.UserCanEdit && !Model.ComplaintClosed && !Model.MustAccept)
        {
            <a asp-action="Actions" asp-route-id="@Model.Id" class="usa-button usa-button-outline">Add/edit actions</a>
        }
        @if (Model.UserCanDelete)
        {
            <a asp-action="Delete" asp-route-id="@Model.Id" class="usa-button usa-button-secondary">Delete</a>
        }
        @if (!Model.Deleted)
        {
            @if (Model.ComplaintClosed)
            {
                <a asp-action="ComplaintDetails" asp-controller="Public" asp-route-id="@Model.Id" class="usa-button usa-button-outline">View public page</a>
            }
            else
            {
                <a asp-action="PublicDetails" asp-controller="Complaints" asp-route-id="@Model.Id">View public details</a>
            }
        }
    </div>
}

@if (Model.Deleted)
{
    <h2>Complaint Has Been Deleted</h2>

    @if (Model.UserCanDelete)
    {
        <div class="gaepd-noprint">
            <a asp-action="Restore" asp-route-id="@Model.Id" class="usa-button usa-button-secondary">Restore</a>
        </div>
    }

    <table class="gaepd-table-compact gaepd-table-rowheadings gaepd-table-autowidth">
        <tbody>
        <tr>
            <th scope="row">@Html.DisplayNameFor(model => model.DeletedBy)</th>
            <td>@Html.DisplayFor(model => model.DeletedBy.FullName) on @Html.DisplayFor(model => model.DateDeleted)</td>
        </tr>
        <tr>
            <th scope="row">@Html.DisplayNameFor(model => model.DeleteComments)</th>
            <td class="gaepd-preserve-linebreaks">@Html.DisplayFor(model => model.DeleteComments)</td>
        </tr>
        </tbody>
    </table>
}

<h2 id="status">Status: <em>@Model.Status.GetDisplayName()</em></h2>

@if (!Model.Deleted && (Model.UserCanEdit || Model.UserCanAssign || Model.UserCanReview) && !Model.MustAccept)
{
    <div class="gaepd-noprint">
        @if (Model.ReviewRequested && Model.UserCanReview && !Model.ComplaintClosed)
        {
            <a asp-action="Approve" asp-route-id="@Model.Id" class="usa-button usa-button-outline">Close Complaint (approved)</a>
            <a asp-action="Return" asp-route-id="@Model.Id" class="usa-button usa-button-outline">Return to staff (not approved)</a>
        }
        @if (!Model.IsAssigned && Model.UserCanAssign && !Model.ReviewRequested && !Model.ComplaintClosed)
        {
            <a asp-action="Assign" asp-route-id="@Model.Id" class="usa-button usa-button-outline">Assign</a>
        }
        @if (Model.UserCanEdit && !Model.ReviewRequested && !Model.ComplaintClosed)
        {
            <a asp-action="RequestReview" asp-route-id="@Model.Id" class="usa-button usa-button-outline">Submit for review</a>
            @if (Model.IsAssigned)
            {
                <a asp-action="Assign" asp-route-id="@Model.Id" class="usa-button usa-button-outline">Transfer/reassign</a>
            }
        }
        @if (Model.ComplaintClosed && Model.UserCanReopen)
        {
            <a asp-action="Reopen" asp-route-id="@Model.Id" class="usa-button usa-button-outline">Reopen</a>
        }
    </div>
}

@if (Model.ComplaintClosed)
{
    <table class="gaepd-table-compact gaepd-table-rowheadings gaepd-table-autowidth">
        <tbody>
        <tr>
            <th scope="row">@Html.DisplayNameFor(model => model.ReviewBy)</th>
            <td>@Html.DisplayFor(model => model.ReviewBy.FullName), @Html.DisplayFor(model => model.DateComplaintClosed)</td>
        </tr>
        <tr>
            <th scope="row">@Html.DisplayNameFor(model => model.ReviewComments)</th>
            <td>@Html.DisplayFor(model => model.ReviewComments)</td>
        </tr>
        </tbody>
    </table>
}

<table class="gaepd-table-compact gaepd-table-rowheadings gaepd-table-autowidth">
    <tbody>
    <tr>
        <th scope="row">@Html.DisplayNameFor(model => model.CurrentOffice)</th>
        <td>@Html.DisplayFor(model => model.CurrentOffice.Name)</td>
    </tr>
    <tr>
        <th scope="row">@Html.DisplayNameFor(model => model.CurrentOwnerFullName)</th>
        <td>
            @Html.DisplayFor(model => model.CurrentOwnerFullName)
            @if (Model.CurrentOwner != null)
            {
                <text>, </text>
                @Html.DisplayFor(model => model.CurrentOwnerEmail)
            }
        </td>
    </tr>
    <tr>
        <th scope="row">@Html.DisplayNameFor(model => model.DateCurrentOwnerAssigned)</th>
        <td>@Html.DisplayFor(model => model.DateCurrentOwnerAssigned)</td>
    </tr>
    <tr>
        <th scope="row">@Html.DisplayNameFor(model => model.DateReceived)</th>
        <td>@Html.DisplayFor(model => model.DateReceived)</td>
    </tr>
    </tbody>
</table>

<h2 id="caller">Caller</h2>

<table class="gaepd-table-compact gaepd-table-rowheadings gaepd-table-autowidth">
    <tbody>
    <tr>
        <th scope="row">@Html.DisplayNameFor(model => model.CallerName)</th>
        <td>@Html.DisplayFor(model => model.CallerName)</td>
    </tr>
    <tr>
        <th scope="row">@Html.DisplayNameFor(model => model.CallerRepresents)</th>
        <td>@Html.DisplayFor(model => model.CallerRepresents)</td>
    </tr>
    <tr>
        <th scope="row">@Html.DisplayNameFor(model => model.CallerAddress)</th>
        <td class="gaepd-preserve-linebreaks">@Html.DisplayFor(model => model.CallerAddress)</td>
    </tr>
    <tr>
        <th scope="row">@Html.DisplayNameFor(model => model.CallerPhoneNumber)</th>
        <td>
            @Html.DisplayFor(model => model.CallerPhoneNumber)
            @if (!(Model.CallerPhoneNumber == null))
            {
                <em>@Html.DisplayFor(model => model.CallerPhoneType)</em>
            }
        </td>
    </tr>
    <tr>
        <th scope="row">@Html.DisplayNameFor(model => model.CallerSecondaryPhoneNumber)</th>
        <td>
            @Html.DisplayFor(model => model.CallerSecondaryPhoneNumber)
            @if (!(Model.CallerSecondaryPhoneNumber == null))
            {
                <em>@Html.DisplayFor(model => model.CallerSecondaryPhoneType)</em>
            }
        </td>
    </tr>
    <tr>
        <th scope="row">@Html.DisplayNameFor(model => model.CallerTertiaryPhoneNumber)</th>
        <td>
            @Html.DisplayFor(model => model.CallerTertiaryPhoneNumber)
            @if (!(Model.CallerTertiaryPhoneNumber == null))
            {
                <em>@Html.DisplayFor(model => model.CallerTertiaryPhoneType)</em>
            }
        </td>
    </tr>
    <tr>
        <th scope="row">@Html.DisplayNameFor(model => model.CallerEmail)</th>
        <td>@Html.DisplayFor(model => model.CallerEmail)</td>
    </tr>
    </tbody>
</table>

<h2 id="complaint">Complaint</h2>

<p class="gaepd-preserve-linebreaks">@Html.DisplayFor(model => model.ComplaintNature)</p>

<table class="gaepd-table-compact gaepd-table-rowheadings gaepd-table-autowidth">
    <tbody>
    <tr>
        <th scope="row">@Html.DisplayNameFor(model => model.PrimaryConcern)</th>
        <td>@Html.DisplayFor(model => model.PrimaryConcern.Name)</td>
    </tr>
    <tr>
        <th scope="row">@Html.DisplayNameFor(model => model.SecondaryConcern)</th>
        <td>@Html.DisplayFor(model => model.SecondaryConcern.Name)</td>
    </tr>
    </tbody>
</table>

<table class="gaepd-table-compact gaepd-table-rowheadings gaepd-table-autowidth">
    <tbody>
    <tr>
        <th scope="row">@Html.DisplayNameFor(model => model.ComplaintLocation)</th>
        <td class="gaepd-preserve-linebreaks">@Html.DisplayFor(model => model.ComplaintLocation)</td>
    </tr>
    <tr>
        <th scope="row">@Html.DisplayNameFor(model => model.ComplaintDirections)</th>
        <td class="gaepd-preserve-linebreaks">@Html.DisplayFor(model => model.ComplaintDirections)</td>
    </tr>
    <tr>
        <th scope="row">@Html.DisplayNameFor(model => model.ComplaintCity)</th>
        <td>@Html.DisplayFor(model => model.ComplaintCity)</td>
    </tr>
    <tr>
        <th scope="row">@Html.DisplayNameFor(model => model.ComplaintCounty)</th>
        <td>@Html.DisplayFor(model => model.ComplaintCounty.Name)</td>
    </tr>
    </tbody>
</table>

<h2 id="source">Source</h2>

<table class="gaepd-table-compact gaepd-table-rowheadings gaepd-table-autowidth">
    <tbody>
    <tr>
        <th scope="row">@Html.DisplayNameFor(model => model.SourceFacilityId)</th>
        <td>@Html.DisplayFor(model => model.SourceFacilityId)</td>
    </tr>
    <tr>
        <th scope="row">@Html.DisplayNameFor(model => model.SourceContactName)</th>
        <td>@Html.DisplayFor(model => model.SourceContactName)</td>
    </tr>
    <tr>
        <th scope="row">@Html.DisplayNameFor(model => model.SourceFacilityName)</th>
        <td>@Html.DisplayFor(model => model.SourceFacilityName)</td>
    </tr>
    <tr>
        <th scope="row">@Html.DisplayNameFor(model => model.SourceAddress)</th>
        <td class="gaepd-preserve-linebreaks">@Html.DisplayFor(model => model.SourceAddress)</td>
    </tr>
    <tr>
        <th scope="row">@Html.DisplayNameFor(model => model.SourcePhoneNumber)</th>
        <td>
            @Html.DisplayFor(model => model.SourcePhoneNumber)
            @if (!(Model.SourcePhoneNumber == null))
            {
                <em>@Html.DisplayFor(model => model.SourcePhoneType)</em>
            }
        </td>
    </tr>
    <tr>
        <th scope="row">@Html.DisplayNameFor(model => model.SourceSecondaryPhoneNumber)</th>
        <td>
            @Html.DisplayFor(model => model.SourceSecondaryPhoneNumber)
            @if (!(Model.SourceSecondaryPhoneNumber == null))
            {
                <em>@Html.DisplayFor(model => model.SourceSecondaryPhoneType)</em>
            }
        </td>
    </tr>
    <tr>
        <th scope="row">@Html.DisplayNameFor(model => model.SourceTertiaryPhoneNumber)</th>
        <td>
            @Html.DisplayFor(model => model.SourceTertiaryPhoneNumber)
            @if (!(Model.SourceTertiaryPhoneNumber == null))
            {
                <em>@Html.DisplayFor(model => model.SourceTertiaryPhoneType)</em>
            }
        </td>
    </tr>
    <tr>
        <th scope="row">@Html.DisplayNameFor(model => model.SourceEmail)</th>
        <td>@Html.DisplayFor(model => model.SourceEmail)</td>
    </tr>
    </tbody>
</table>

<h2 id="actions">Actions</h2>

@if (Model.UserCanEdit && !Model.ComplaintClosed && !Model.MustAccept)
{
    <div class="gaepd-noprint">
        <a asp-action="Actions" asp-route-id="@Model.Id" class="usa-button usa-button-outline">Add/edit actions</a>
    </div>
}

@if (Model.ComplaintActions == null || Model.ComplaintActions.Count == 0)
{
    <p>
        <em>None.</em>
    </p>
}
else
{
    @foreach (var item in Model.ComplaintActions)
    {
        <h3>
            @Html.DisplayFor(m => item.ActionDate) <em>&mdash; @Html.DisplayFor(m => item.ActionType.Name)</em>
        </h3>
        <table class="gaepd-table-compact gaepd-table-rowheadings gaepd-table-autowidth">
            <tbody>
            <tr>
                <th scope="row">@Html.DisplayNameFor(m => item.Investigator)</th>
                <td>@Html.DisplayFor(m => item.Investigator)</td>
            </tr>
            @if (!string.IsNullOrEmpty(item.EnteredById) && item.DateEntered.HasValue)
            {
                <tr>
                    <th scope="row">@Html.DisplayNameFor(m => item.EnteredBy)</th>
                    <td>@Html.DisplayFor(m => item.EnteredBy.FullName), @Html.DisplayFor(m => item.DateEntered)</td>
                </tr>
            }
            <tr>
                <th scope="row">@Html.DisplayNameFor(m => item.Comments)</th>
                <td>
                    <p class="gaepd-preserve-linebreaks mt0">@Html.DisplayFor(m => item.Comments)</p>
                </td>
            </tr>
            </tbody>
        </table>
    }
}

<h2 id="attachments">Attachments</h2>
@{
    var attachmentsEditable = Model.UserCanEditDetails && !Model.ComplaintClosed && !Model.MustAccept
        || User.IsInRole(CtsRole.AttachmentsEditor.ToString()) && !Model.Deleted;
}
@if (attachmentsEditable)
{
    if (Model.ComplaintClosed)
    {
        <p><strong>Be careful! This complaint has already been approved/closed.</strong></p>
    }
    <form asp-action="UploadFiles" method="post" enctype="multipart/form-data" class="gaepd-form-fileupload">
        <input type="file" name="files" id="files" multiple="multiple" class="filesUploadInput" data-multiple-caption="{count} files selected"
               accept=".txt,.jpg,.jpeg,.png,.gif,.svg,.pdf,.html,.htm,.csv,.xlsx,.xls,.rtf,.docx,.doc,.ppt,.pptx" />
        <label for="files" class="filesUploadLabel">
            <kbd class="usa-button usa-button-outline usa-button-active">&nbsp;</kbd><span class="usa-button usa-button-active">Choose files...</span>
        </label>
        <button type="submit" class="filesUploadButton">Upload selected files</button>
        <span class="filesUploadInfo"></span>
        <p>
            <em>
                Supported file types are images, documents, and spreadsheets.<br />
                All files must comply with
                <a href="~/static/Complaint-Attachments-Policy.pdf" target="_blank">EPD’s complaint attachments policy (<abbr>PDF</abbr>)</a>.
            </em>
        </p>
        <input asp-for="Id" type="hidden" />
    </form>
}

@await Html.PartialAsync("_AttachmentsTablePartial", (Model.Attachments, attachmentsEditable))

<h2 id="history">Audit History</h2>

<table class="gaepd-table-compact gaepd-table-rowheadings gaepd-table-autowidth">
    <tbody>
    <tr>
        <th scope="row">@Html.DisplayNameFor(model => model.ReceivedBy)</th>
        <td>@Html.DisplayFor(model => model.ReceivedBy.FullName), @Html.DisplayFor(model => model.DateReceived)</td>
    </tr>
    <tr>
        <th scope="row">@Html.DisplayNameFor(model => model.EnteredBy)</th>
        <td>@Html.DisplayFor(model => model.EnteredBy.FullName), @Html.DisplayFor(model => model.DateEntered)</td>
    </tr>
    </tbody>
</table>

@if (Model.ComplaintTransitions == null || Model.ComplaintTransitions.Count == 0)
{
    <p>
        <em>None.</em>
    </p>
}
else
{
    @if (Model.EarliestComplaintTransition < CTS.OracleMigrationDate)
    {
        <p>
            <small>Audit history prior to @String.Format(CTS.FormatDateDisplay, CTS.OracleMigrationDate) may be incomplete.</small>
        </p>
    }
    <table class="usa-table-borderless gaepd-table-responsive gaepd-table-aligntop">
        <thead>
        <tr>
            <th scope="col">@Html.DisplayNameFor(m => m.ComplaintTransitions.FirstOrDefault().DateTransferred)</th>
            <th scope="col">@Html.DisplayNameFor(m => m.ComplaintTransitions.FirstOrDefault().TransitionType)</th>
            <th scope="col">@Html.DisplayNameFor(m => m.ComplaintTransitions.FirstOrDefault().TransferredFromUser)</th>
            <th scope="col">@Html.DisplayNameFor(m => m.ComplaintTransitions.FirstOrDefault().TransferredToUser)</th>
            <th scope="col">@Html.DisplayNameFor(m => m.ComplaintTransitions.FirstOrDefault().DateAccepted)</th>
            <th scope="col">@Html.DisplayNameFor(m => m.ComplaintTransitions.FirstOrDefault().TransferredByUser)</th>
            <th scope="col">@Html.DisplayNameFor(m => m.ComplaintTransitions.FirstOrDefault().Comment)</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in Model.ComplaintTransitions)
        {
            <tr>
                <td data-label="@Html.DisplayNameFor(m => item.DateTransferred)">@Html.DisplayFor(m => item.DateTransferred)</td>
                <td data-label="@Html.DisplayNameFor(m => item.TransitionType)">@item.TransitionType.GetDisplayName()</td>
                <td data-label="@Html.DisplayNameFor(m => item.TransferredFromUser)">
                    @Html.DisplayFor(m => item.TransferredFromOffice.Name)
                    @if (item.TransferredFromOffice != null)
                    {
                        <br />
                    }
                    @Html.DisplayFor(m => item.TransferredFromUserName)
                </td>
                <td data-label="@Html.DisplayNameFor(m => item.TransferredToUser)">
                    @Html.DisplayFor(m => item.TransferredToOffice.Name)
                    @if (item.TransferredToOffice != null)
                    {
                        <br />
                    }
                    @Html.DisplayFor(m => item.TransferredToUserName)
                </td>
                <td data-label="@Html.DisplayNameFor(m => item.DateAccepted)">@Html.DisplayFor(m => item.DateAccepted)</td>
                <td data-label="@Html.DisplayNameFor(m => item.TransferredByUser)">
                    @Html.DisplayFor(m => item.TransferredByUserName)
                </td>
                <td data-label="@Html.DisplayNameFor(m => item.Comment)">@Html.DisplayFor(m => item.Comment)</td>
            </tr>
        }
        </tbody>
    </table>
}

@section PageScripts {
    <script asp-add-content-to-csp>
        (function (document, window, index) {

            // Set fancyBox defaults
            $.fancybox.defaults.buttons = [
                'fullScreen',
                'download',
                'zoom',
                'close'
            ];

            // File upload button behavior
            var filesUploadInput = document.getElementsByClassName('filesUploadInput')[0];
            if (filesUploadInput != undefined) {
                var filesUploadLabel = document.getElementsByClassName('filesUploadLabel')[0];
                var filesUploadInfo = document.getElementsByClassName('filesUploadInfo')[0];
                var filesUploadButton = document.getElementsByClassName('filesUploadButton')[0];
                var filesUploadLabelStart = filesUploadLabel.innerHTML;
                var filesUploadInfoStart = filesUploadInfo.innerHTML;

                filesUploadButton.style.display = "none";

                filesUploadInput.addEventListener('change', function (e) {
                    var fileName = '';

                    if (this.files && this.files.length > 1) {
                        fileName = (this.getAttribute('data-multiple-caption') || '').replace('{count}', this.files.length);
                    } else {
                        fileName = e.target.value.split('\\').pop();
                    }

                    if (fileName) {
                        filesUploadLabel.querySelector('kbd').innerHTML = fileName;
                        if (this.files.length > 10) {
                            filesUploadInfo.innerHTML = "Too many files selected. Please select fewer than 10 files at a time.";
                            filesUploadInfo.classList.add('usa-input-error-message');
                            filesUploadButton.style.display = "none";
                        } else {
                            filesUploadButton.style.display = "inline-block";
                            filesUploadInfo.innerHTML = filesUploadInfoStart;
                        }
                    } else {
                        filesUploadLabel.innerHTML = filesUploadLabelStart;
                        filesUploadInfo.innerHTML = filesUploadInfoStart;
                        filesUploadInfo.classList.remove('usa-input-error-message');
                        filesUploadButton.style.display = "none";
                    }
                });

                // Firefox bug fix
                filesUploadInput.addEventListener('focus', function () {
                    filesUploadInput.classList.add('has-focus');
                });
                filesUploadInput.addEventListener('blur', function () {
                    filesUploadInput.classList.remove('has-focus');
                });
            }

        }(document, window, 0));
    </script>
}